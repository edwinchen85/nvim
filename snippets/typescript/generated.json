{
  "reactArrowFunctionComponent": {
    "key": "reactArrowFunctionComponent",
    "prefix": "rafc",
    "body": [
      "import React from 'react'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactArrowFunctionExportComponent": {
    "key": "reactArrowFunctionExportComponent",
    "prefix": "rafce",
    "body": [
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactFunctionMemoComponent": {
    "key": "reactFunctionMemoComponent",
    "prefix": "rmc",
    "body": [
      "import React, { memo } from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = memo(() => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "})",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Memo Function Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactFunctionalComponent": {
    "key": "reactFunctionalComponent",
    "prefix": "rfc",
    "body": [
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactFunctionalComponentRedux": {
    "key": "reactFunctionalComponentRedux",
    "prefix": "rfcredux",
    "body": [
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = (props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "Creates a React functional component with connected redux and ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactFunctionalExportComponent": {
    "key": "reactFunctionalExportComponent",
    "prefix": "rfce",
    "body": [
      "import React, { FC, memo } from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}}:FC = () => {",
      "  return <div>${1:first}</div>",
      "}",
      "",
      "export default memo(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "Creates a React Functional Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleAssert": {
    "key": "consoleAssert",
    "prefix": "cas",
    "body": ["console.assert(${1:first}, ${2:second})"],
    "description": "If the specified expression is false, the message is written to the console along with a stack trace",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleClear": {
    "key": "consoleClear",
    "prefix": "ccl",
    "body": ["console.clear()"],
    "description": "Clears the console",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleCount": {
    "key": "consoleCount",
    "prefix": "cco",
    "body": ["console.count(${1:first})"],
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleDir": {
    "key": "consoleDir",
    "prefix": "cdi",
    "body": ["console.dir(${1:first})"],
    "description": "Prints a JavaScript representation of the specified object",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleError": {
    "key": "consoleError",
    "prefix": "cer",
    "body": ["console.error(${1:first})"],
    "description": "Displays a message in the console and also includes a stack trace from where the method was called",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleGroup": {
    "key": "consoleGroup",
    "prefix": "cgr",
    "body": ["console.group('${1:first}')"],
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleGroupEnd": {
    "key": "consoleGroupEnd",
    "prefix": "cge",
    "body": ["console.groupEnd()"],
    "description": "Closes out the corresponding console.group().",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleLog": {
    "key": "consoleLog",
    "prefix": "clg",
    "body": ["console.log(${1:first})"],
    "description": "Displays a message in the console",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleTrace": {
    "key": "consoleTrace",
    "prefix": "ctr",
    "body": ["console.trace(${1:first})"],
    "description": "Prints a stack trace from the point where the method was called",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleLogObject": {
    "key": "consoleLogObject",
    "prefix": "clo",
    "body": ["console.log('${1:first}', ${1:first})"],
    "description": "Logs property with name.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleLogJson": {
    "key": "consoleLogJson",
    "prefix": "clj",
    "body": ["console.log('${1:first}', JSON.stringify(${1:first}, null, 2))"],
    "description": "Logs stringified JSON property with name.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleTime": {
    "key": "consoleTime",
    "prefix": "ctm",
    "body": ["console.time('${1:first}')"],
    "description": "Console time wrapper",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleTimeEnd": {
    "key": "consoleTimeEnd",
    "prefix": "cte",
    "body": ["console.timeEnd('${1:first}')"],
    "description": "Console time end wrapper",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleWarn": {
    "key": "consoleWarn",
    "prefix": "cwa",
    "body": ["console.warn(${1:first})"],
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleInfo": {
    "key": "consoleInfo",
    "prefix": "cin",
    "body": ["console.info(${1:first})"],
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleTable": {
    "key": "consoleTable",
    "prefix": "ctl",
    "body": ["console.table([${1:first}])"],
    "description": "Logs table to console",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useCallback": {
    "key": "useCallback",
    "prefix": "ucb",
    "body": [
      "useCallback(",
      "  () => {",
      "    ${1:first}",
      "  },",
      "  [${2:second}],",
      ")",
      ""
    ],
    "description": "React useCallback() hook",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useContext": {
    "key": "useContext",
    "prefix": "uc",
    "body": ["const ${1:first} = useContext(${2:second})"],
    "description": "React useContext() hook",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useEffect": {
    "key": "useEffect",
    "prefix": "ue",
    "body": ["useEffect(() => {", "  ${1:first}", "}, [${2:second}])"],
    "description": "React useEffect() hook",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useEffectWithReturn": {
    "key": "useEffectWithReturn",
    "prefix": "uer",
    "body": [
      "useEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  }",
      "}, [${3:third}])"
    ],
    "description": "React useEffect() with cleanup hook",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useImperativeHandle": {
    "key": "useImperativeHandle",
    "prefix": "useImperativeHandleSnippet",
    "body": [
      "useImperativeHandle(",
      "  ${1:first},",
      "  () => {",
      "    ${2:second}",
      "  },",
      "  [${3:third}],",
      ")"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useLayoutEffect": {
    "key": "useLayoutEffect",
    "prefix": "useLayoutEffectSnippet",
    "body": [
      "useLayoutEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  };",
      "}, [${3:third}])"
    ],
    "description": "React useLayoutEffect() hook",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useMemo": {
    "key": "useMemo",
    "prefix": "ume",
    "body": ["useMemo(() => ${1:first}, [${2:second}])"],
    "description": "React useMemo() hook",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useReducer": {
    "key": "useReducer",
    "prefix": "useReducerSnippet",
    "body": [
      "const [state, dispatch] = useReducer(${1:first}, ${2:second}, ${3:third})"
    ],
    "description": "React useReducer() hook",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useRef": {
    "key": "useRef",
    "prefix": "ur",
    "body": ["const ${1:first} = useRef(${2:second})"],
    "description": "React useRef() hook",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useState": {
    "key": "useState",
    "prefix": "us",
    "body": [
      "const [${1:first}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:second})"
    ],
    "description": "React useState() hook",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importDestructing": {
    "key": "importDestructing",
    "prefix": "imd",
    "body": ["import { ${2:second} } from '${1:first}'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importEverything": {
    "key": "importEverything",
    "prefix": "ime",
    "body": ["import * as ${2:second} from '${1:first}'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importNoModuleName": {
    "key": "importNoModuleName",
    "prefix": "imn",
    "body": ["import '${1:first}'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importReact": {
    "key": "importReact",
    "prefix": "imr",
    "body": ["import React from 'react'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "import": {
    "key": "import",
    "prefix": "imp",
    "body": ["import ${2:second} from '${1:first}'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactNativeFunctionalComponent": {
    "key": "reactNativeFunctionalComponent",
    "prefix": "rnf",
    "body": [
      "import { View, Text } from 'react-native'",
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactNativeFunctionalComponentWithStyles": {
    "key": "reactNativeFunctionalComponentWithStyles",
    "prefix": "rnfs",
    "body": [
      "import { StyleSheet, Text, View } from 'react-native'",
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "const styles = StyleSheet.create({})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactNativeFunctionalExportComponent": {
    "key": "reactNativeFunctionalExportComponent",
    "prefix": "rnfe",
    "body": [
      "import { View, Text } from 'react-native'",
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactNativeFunctionalExportComponentWithStyles": {
    "key": "reactNativeFunctionalExportComponentWithStyles",
    "prefix": "rnfes",
    "body": [
      "import { StyleSheet, Text, View } from 'react-native'",
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      "const styles = StyleSheet.create({})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactNativeImport": {
    "key": "reactNativeImport",
    "prefix": "imrn",
    "body": ["import { ${1:first} } from 'react-native'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactNativeStyles": {
    "key": "reactNativeStyles",
    "prefix": "rnstyle",
    "body": ["const styles = StyleSheet.create({${1:first}})"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importReduxConnect": {
    "key": "importReduxConnect",
    "prefix": "redux",
    "body": ["import { connect } from 'react-redux'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reduxAction": {
    "key": "reduxAction",
    "prefix": "rxaction",
    "body": [
      "export const ${1:first} = (payload) => ({",
      "  type: ${2:second},",
      "  payload",
      "})",
      ""
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reduxConst": {
    "key": "reduxConst",
    "prefix": "rxconst",
    "body": ["export const ${1:first} = '${1:first}'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reduxReducer": {
    "key": "reduxReducer",
    "prefix": "rxreducer",
    "body": [
      "const initialState = {}",
      "",
      "export default (state = initialState, { type, payload }) => {",
      "  switch (type) {",
      "",
      "  case ${1:first}:",
      "    return { ...state, ...payload }",
      "",
      "  default:",
      "    return state",
      "  }",
      "}",
      ""
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reduxSelector": {
    "key": "reduxSelector",
    "prefix": "rxselect",
    "body": [
      "import { createSelector } from 'reselect'",
      "",
      "export const ${1:first} = state => state.${2:second}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reduxSlice": {
    "key": "reduxSlice",
    "prefix": "rxslice",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit'",
      "",
      "const initialState = {",
      "",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = createSlice({",
      "  name: ${2:second},",
      "  initialState,",
      "  reducers: {}",
      "});",
      "",
      "export const {} = ${1:${TM_FILENAME_BASE}}.actions",
      "",
      "export default ${1:${TM_FILENAME_BASE}}.reducer"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "mappingToProps": {
    "key": "mappingToProps",
    "prefix": "reduxmap",
    "body": [
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "describeBlock": {
    "key": "describeBlock",
    "prefix": "desc",
    "body": ["describe('${1:first}', () => { ${2:second} })"],
    "description": "Testing `describe` block",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "itAsyncBlock": {
    "key": "itAsyncBlock",
    "prefix": "tita",
    "body": ["it('should ${1:first}', async () => { ${2:second} })"],
    "description": "Testing asynchronous `it` block",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "itBlock": {
    "key": "itBlock",
    "prefix": "tit",
    "body": ["it('should ${1:first}', () => { ${2:second} })"],
    "description": "Testing `it` block",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "setupReactComponentTestWithRedux": {
    "key": "setupReactComponentTestWithRedux",
    "prefix": "srtest",
    "body": [
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from '~/store'",
      "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(",
      "    <Provider store={store}>",
      "     <${1:${TM_FILENAME_BASE}} {...defaultProps} />",
      "    </Provider>,",
      "  )",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "description": "Create test component",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "setupReactNativeTest": {
    "key": "setupReactNativeTest",
    "prefix": "sntest",
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "",
      "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "setupReactNativeTestWithRedux": {
    "key": "setupReactNativeTestWithRedux",
    "prefix": "snrtest",
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from '~/store'",
      "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(",
      "    <Provider store={store}>",
      "      <${1:${TM_FILENAME_BASE}} {...defaultProps} />",
      "    </Provider>,",
      "  )",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "setupReactTest": {
    "key": "setupReactTest",
    "prefix": "stest",
    "body": [
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "",
      "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "testAsyncBlock": {
    "key": "testAsyncBlock",
    "prefix": "testa",
    "body": ["test('should ${1:first}', async () => { ${2:second} })"],
    "description": "Testing `asynchronous test` block",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "testBlock": {
    "key": "testBlock",
    "prefix": "test",
    "body": ["test('should ${1:first}', () => { ${2:second} })"],
    "description": "Testing `test` block",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "exportDefault": {
    "key": "exportDefault",
    "prefix": "exp",
    "body": ["export default ${1:first}"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "exportDestructing": {
    "key": "exportDestructing",
    "prefix": "exd",
    "body": ["export { ${2:second} } from '${1:first}'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "method": {
    "key": "method",
    "prefix": "met",
    "body": ["${1:first} = (${2:second}) => {${3:third}}"],
    "description": "Creates a method inside a class",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "propertyGet": {
    "key": "propertyGet",
    "prefix": "pge",
    "body": ["get ${1:first}() {", "  return this.${2:second}", "}"],
    "description": "Creates a getter property inside a class",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "propertySet": {
    "key": "propertySet",
    "prefix": "pse",
    "body": ["set ${1:first}(${2:second}) {${3:third}}"],
    "description": "Creates a setter property inside a class",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "forEach": {
    "key": "forEach",
    "prefix": "fea",
    "body": ["${1:first}.forEach(${2:second} => {${3:third}})"],
    "description": "Creates a forEach statement",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "forOf": {
    "key": "forOf",
    "prefix": "fof",
    "body": ["for(let ${1:first} of ${2:second}) {${3:third}}"],
    "description": "Iterating over property names of iterable objects",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "forIn": {
    "key": "forIn",
    "prefix": "fin",
    "body": ["for(let ${1:first} in ${2:second}) {${3:third}}"],
    "description": "Iterating over property values of iterable objects",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "destructingObject": {
    "key": "destructingObject",
    "prefix": "dob",
    "body": ["const {${2:second}} = ${1:first}"],
    "description": "Creates and assigns a local variable using object destructing",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "destructingArray": {
    "key": "destructingArray",
    "prefix": "dar",
    "body": ["const [${2:second}] = ${1:first}"],
    "description": "Creates and assigns a local variable using array destructing",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "setInterval": {
    "key": "setInterval",
    "prefix": "sti",
    "body": ["setInterval(() => { ${1:first} }, ${2:second})"],
    "description": "Executes the given function at specified intervals",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "setTimeOut": {
    "key": "setTimeOut",
    "prefix": "sto",
    "body": ["setTimeout(() => { ${1:first} }, ${2:second})"],
    "description": "Executes the given function after the specified delay",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "promise": {
    "key": "promise",
    "prefix": "prom",
    "body": ["return new Promise((resolve, reject) => { ${1:first} })"],
    "description": "Creates and returns a new Promise in the standard ES7 syntax",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "classConstructor": {
    "key": "classConstructor",
    "prefix": "rconst",
    "body": [
      "constructor(props) {",
      "  super(props)",
      "",
      "  this.state = {",
      "     ${1:first}",
      "  }",
      "}"
    ],
    "description": "Adds a default constructor for it('', () => {})the class that contains props as arguments",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "emptyState": {
    "key": "emptyState",
    "prefix": "est",
    "body": ["state = { ${1:first} }"],
    "description": "Creates empty state object. To be used in a constructor.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "componentDidMount": {
    "key": "componentDidMount",
    "prefix": "cdm",
    "body": ["componentDidMount() { ${1:first} }"],
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "shouldComponentUpdate": {
    "key": "shouldComponentUpdate",
    "prefix": "scu",
    "body": ["shouldComponentUpdate(nextProps, nextState) { ${1:first} }"],
    "description": "Invoked before rendering when new props or state are being received. ",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "componentDidUpdate": {
    "key": "componentDidUpdate",
    "prefix": "cdup",
    "body": ["componentDidUpdate(prevProps, prevState) { ${1:first}} "],
    "description": "Invoked immediately after the component's updates are flushed to the DOM.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "componentWillUnmount": {
    "key": "componentWillUnmount",
    "prefix": "cwun",
    "body": ["componentWillUnmount() {${1:first} }"],
    "description": "Invoked immediately before a component is unmounted from the DOM.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "getDerivedStateFromProps": {
    "key": "getDerivedStateFromProps",
    "prefix": "gdsfp",
    "body": ["static getDerivedStateFromProps(props, state) {${1:first}}"],
    "description": "Invoked right before calling the render method, both on the initial mount and on subsequent updates.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "getSnapshotBeforeUpdate": {
    "key": "getSnapshotBeforeUpdate",
    "prefix": "gsbu",
    "body": [
      "getSnapshotBeforeUpdate = (prevProps, prevState) => {${1:first}}"
    ],
    "description": "Called right before mutations are made (e.g. before the DOM is updated)",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "createContext": {
    "key": "createContext",
    "prefix": "rcontext",
    "body": ["const ${1:first} = React.createContext()"],
    "description": "Create React context",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "commentInline": {
    "key": "commentInline",
    "prefix": "cmi",
    "body": ["/** ${1} */"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "commentBlock": {
    "key": "commentBlock",
    "prefix": "cmb",
    "body": ["/**", " * ${1}", " */"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "commentPerf": {
    "key": "commentPerf",
    "prefix": "perf",
    "body": "// PERF: $0",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "commentHack": {
    "key": "commentHack",
    "prefix": "hack",
    "body": "// HACK: $0",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "commentTodo": {
    "key": "commentTodo",
    "prefix": "todo",
    "body": "// TODO: $0",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "commentNote": {
    "key": "commentNote",
    "prefix": "note",
    "body": "// NOTE: $0",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "commentFix": {
    "key": "commentFix",
    "prefix": "fix",
    "body": "// FIX: $0",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "commentBug": {
    "key": "commentBug",
    "prefix": "bug",
    "body": "// BUG: $0",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "commentWarning": {
    "key": "commentWarning",
    "prefix": "warning",
    "body": "// WARNING: $0",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "hocComponentWithRedux": {
    "key": "hocComponentWithRedux",
    "prefix": "hocredux",
    "body": [
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "import PropTypes from 'prop-types'",
      "",
      "export const mapStateToProps = state => ({})",
      "",
      "export const mapDispatchToProps = {}",
      "",
      "export const ${1:first} = (WrappedComponent) => {",
      "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "  hocComponent.propTypes = {}",
      "",
      "  return hocComponent",
      "}",
      "",
      "export default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:first}(WrapperComponent))",
      ""
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "arrowFunctionWithArguments": {
    "key": "implicit return with arg(s)",
    "prefix": "afi",
    "body": "(${1}) => $0",
    "description": "Arrow function (implicit return) with arguments",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "arrowFunctionObjectWithArguments": {
    "key": "implicit return object with arg(s)",
    "prefix": "afo",
    "body": "(${1}) => ({ ${2} })",
    "description": "Arrow function (object literal implicit return) with arguments",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "arrowFunctionExplicitEmptyWithArguments": {
    "key": "explicit empty with arg(s)",
    "prefix": "afe",
    "body": ["(${1}) => {", "\t$0", "}"],
    "description": "Arrow function (without return) with arguments",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "arrowFunctionImmediatelyInvoque": {
    "key": "immediately invoke arrow function",
    "prefix": "iiaf",
    "body": "(() => $0)()",
    "description": "Arrow function Immediately Invoke",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  }
}
